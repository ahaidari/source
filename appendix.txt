Appendix - Command Line Options for Oclptx
==========================================

The command line interface for oclptx is nearly identical to that of ptx2. We have additionally implemented some custom code to handle multiple waypoint masks in the command line. There are also features that we have not implemented due to time constraints. Here, we give a list of options available for use in the command line, along with examples on how to use them.

All runs of oclptx should start with the following string in the CLI:

.. code-block:: none 
  
  ./oclptx -s <bedpostdirectory>/TypeOfData --simple
  
For example, to run oclptx with a folder called "bedpostXdata" located in the current directory with the "merged" sample dataset, the user would type:

.. code-block:: none

  ./oclptx -s bedpostXdata/merged --simple
  
Keep in mind that bedpostx outputs data in the form "type_parameter". So for the merged data, the actual files in the example bedpostXdata directory would be named "merged_thsamples", "merged_phisamples", "merged_fsamples". The CLI parser will automatically detect the different types of samples, so that the user only needs to specify the "type" (ie: merged) in the CLI for loading.
  
Additional options may be specified in the initialization stage to activate different modes of oclptx, load masks, and perform various other functions. The following section will define the options we support in our release.

Supported Options
^^^^^^^^^^^^^^^^^

#. -m <directory>: load in the binary brain mask. This is a file of 1's and 0's that specifies which areas of the brain are within the tracking region. 
#. -x <directory>: load in an ascii list of seed locations.
#. --avoid <directory>: load in a mask that will cause the path passing through the mask to be rejected.
#. --stop <directory>: load in a mask that will cause the entire tracking to stop if a path passes through the mask.
#. --waypoints <directory1>,<directory2>,...: load in a one or many waypoint masks that tell(s) the program to only keep the paths going through ALL the masks. Note that there is no space between the commas when loading multiple waypoints.
#. --loopcheck : set to true if the option is specified in the CLI. Prevents paths from reiterating over locations that have already been visited.
#. --savepaths : set to true if the option is specified in the CLI. Dumps all path coordinates to an ascii file.
#. --modeuler : set to true if the option is specified in the CLI. Option to use euler streamlining.
#. --steplength=Somevalue: option to specify the step length in mm. 
#. --sampvox=SomeValue : option to sample random points within a sphere of seed voxels, radius of SomeValue.

To demonstrate the usage of these options, we show an example of how the CLI was used with our sample data:

.. code-block:: none

  ./oclptx -s bedpostXdata/merged --simple --sampvox=2 --savepaths 
  -m bedpostXdata/nodif_brain_mask.nii.gz -x ./Seeds/fdt_coordinates.txt
  --modeuler --steplength=0.25 --waypoints waypoints/way1,waypoints/way2 

It is worthwhile to note that if any of the options are inputed incorrectly, the program will still attempt to run oclptx. The options specified AFTER the incorrect option will be neglected. For instance, in the above example, suppose that the user were to forget to put an '=' sign for the --sampvox option, as so:

.. code-block:: none

  ./oclptx -s bedpostXdata/merged --simple --sampvox 2 --savepaths 
  -m bedpostXdata/nodif_brain_mask.nii.gz -x ./Seeds/fdt_coordinates.txt
  --modeuler --steplength=0.25 --waypoints waypoints/way1,waypoints/way2 
  
In this case, oclptx will run without any of the other options following --sampvox (ie: --savepaths, -m, -x, etc).



