Introduction
============

The CFRI has sought to improve an MRI-based diagnostics routine that maps neuron connectivity in human brains. This routine is used to guide surgical and pharmacological treatment, and is considered a valuable resource by the institute. The current open-source implementation of the ancillary computation software, encapsulated in the FSL software suite, takes anywhere from one to five days of computation time on common laboratory workstations. CFRI researchers Dr. Bruce Bjornson and Mr. Daniel Kim have proposed a project to implement a parallelized, GPU-based version of this software in order to reduce the computation time. There has been some precedented work on this concept [Xu]_ , however, none of this work has been made available to the relevant open-source communities.

Diffusion Tensor Imaging
------------------------

Diffusion tensor imaging (DTI or dMRI) is a relatively new field, focusing on the treatment of neurological disorders.  It allows researchers to acquire an image of the both the tissue density and the fluid diffusion direction within a human brain [Hernandez]_ .  In the brain, water diffuses primarily in the direction of neural fibres [Hernandez]_ .  Extracting accurate diffusion paths from the DTI data can macroscopically indicate particular neuron fibre paths between various neural regions.

.. [Hernandez] Hernández, M., Guerrero, G. D., Cecilia, J. M., García, J. M., Inuggi, A., Jbabdi, S., … Sotiropoulos, S. N. (2013). Accelerating fibre orientation estimation from diffusion weighted magnetic resonance imaging using GPUs. PloS one, 8(4), e61892. doi:10.1371/journal.pone.0061892

.. [Xu] Xu, M., Zhang, X., Wang, Y., Ren, L., Wen, Z., Xu, Y., … Yang, H. (2012). Probabilistic Brain Fiber Tractography on GPUs. 2012 IEEE 26th International Parallel and Distributed Processing Symposium Workshops & PhD Forum, 742–751. doi:10.1109/IPDPSW.2012.92

DTI measures the ease of water flow through neural pathways. The resolution is signifcantly coarser than the actual resolution of neuron fibres; voxel dimensions are on the order of milli-meters, wheras neuron fibres are on the order of microns. Therefore, there are many fibre paths within one resolved voxel. It is macro-structure dynamics, and not individual fiber paths, which are being estimated.

DTI Analysis
------------

Probabilistic Tractography is an analysis method which attempts to find neural pathways given a set of DTI data. There are two steps to this process:

* Local Parameter Estimation
* Global Connectivity Estimation

Both of these are implemented as a CPU based module and distributed with FSL. The computation time hampers result turnover due to the delay from the time the patient is screened. 

Local Parameter Estimation
^^^^^^^^^^^^^^^^^^^^^^^^^^

Local parameter estimation primarily deals with the creation of a stochastic diffusion map of the scanned volume by extracting a probability distribution function (pdf) of flow amplitude and orientation. These are commonly in spherical coordinates (:math:`p = p(F, \phi, \theta)` ). Because a finite number of orientations are scanned during the DTI sequence, the exact flow direction at a particular point can be represented by some distribution derived from the composite diffusion data.  

In FSL, the local parameter estimation module is known as bedpostx. Up until November 2013, when a CUDA port was completed by the FSL team, this step had been an exclusively CPU-based algorithm. The CPU-based bedpostx took as long as 1-5 days to complete processing of a large data set on a modern processor. Mr. Kim of CFRI had previously completed a CUDA port before the FSL team, which has been in use at CFRI since May 2013. It has achieved a ~18x speedup. This port has formally been done in the literature:  Mo Xu et al accomplished a 34x speedup of the parameter estimation step [Xu]_.

Global Connectivity Estimation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The scope of our project focuses on implementing the Global Connectivity Estimation step in a SIMD pipeline. The implementation included already with FSL is named probtrackx. In our project, we name it oclptx. Essentially, the Global Connectivity Estimation can be summarized as follows: 

* Drop an imaginary particle into the mesh space at a user-selected point.
* Simulate a step-by-step “flow” of that particle along neural fiber distribution found in the local parameter estimation step.
* Add up paths of a large number of fibers.

The connectivity estimation stage has been attempted by Mo Xu et al. with a 50x improvement [Xu]_, though the results of that have not been open sourced.

GPU Architecture
----------------

Modern GPU hardware contains a highly parallel processing architecture.  For example, a low-end consumer GPU now has 448 cores with one thread per core. In the scope of probabilistic tractography:

* There is potential for major improvements in processing speed, very high performance/cost.
* We require careful code architecture around memory usage, processing breakdown, and communication pathways.
* We can utilize the GPU topology which allows for parallel execution of a single instruction (SIMD). 

The drawback of this architecture is that in a naïve implementation (all threads run to termination), the running time of all the threads in a single execution block is that of the slowest thread. Therefore, if the lengths of the brain fibers vary significantly [Xu]_, there will be wasted GPU resources. Unless there is some oversight from the host software, the threads that compute the interpolation for the shorter fibers finish first, and these threads remain idle until the longest fiber lengths are computed.

The goal of this project is to convert the old probtrackx algorithm into a functional GPU port that is well integrated with FSL. Additionally, it would be beneficial to explore further optimizations and benchmark them appropriately. 

The rest of this report is organized as follows:

* Discussion of the algorithmic theory behind tracking.
* Presentation of our implemented architecture on the GPU.
* Analysis of the results of our tracking algorithm, including a comparison to the old probtrackx implementation.
* Statement of the deliverables of the project.
* Recommendations for future development.
